import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class gameStart implements MouseListener { // gamestart class that
													// controls the very core of
													// the game

	JFrame frame;// frame containing all contents of game
	panel panel;// panel containg
	static gameStart control; // new instance of the game start class
	Timer timer; // new timer to control frame updates of game

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		control = new gameStart();

		SwingUtilities.invokeLater(new Runnable() {
			
			public void run() {

				control.frame = new JFrame("Tower Defence AF 1.0.5");
				control.frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
				control.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				control.frame.setVisible(true);

				control.panel = new panel();

				control.frame.add(control.panel);
				control.frame.addMouseListener(control);

			}
		});

	}

	public void mouseClicked(MouseEvent e) {
		System.out.println("Coords: " + e.getX() + " , " + e.getY());

		int xClick = e.getX(); // sets x and y to = the click data
		int yClick = e.getY() - 30;
		System.out.println(xClick + " , " + yClick);

		if (control.panel.receivingSpotChoice) {

			for (int i = 0; i < 10; i++) {
				for (int x = 0; x < 18; x++) {
					
					if(xClick > 0 && xClick <= 100 && yClick > 700 && yClick <= 800){
						control.panel.receivingSpotChoice = false;
					}
					else if (xClick >= control.panel.boxList[i][x].getLeftX()
							&& xClick < control.panel.boxList[i][x].getRightX()
							&& yClick >= control.panel.boxList[i][x].getTopY()
							&& yClick < control.panel.boxList[i][x]
									.getBottomY()
							&& control.panel.boxList[i][x].getContents() != 1) {

						control.panel.boxList[i][x]
								.setContents(control.panel.placing);
						if(control.panel.placing == 0){
							int towerType = control.panel.boxList[i][x].getContents();
							if(towerType == 2){
								control.panel.credits += 25;
							}
							else if(towerType == 3){
								control.panel.credits += 100;
							}
							else if(towerType ==4){
								control.panel.credits += 500;
							}
							else if(towerType == 5){
								control.panel.credits += 1250;
							}
							else if(towerType == 6){
								control.panel.credits += 2500;
							}
						}
						else if (control.panel.placing == 2
								&& control.panel.credits >= 75) {
							control.panel.boxList[i][x].newTowerOne(
									control.panel.boxList[i][x].getLeftX(),
									control.panel.boxList[i][x].getTopY());
							control.panel.credits = control.panel.credits - 75;
						} else if (control.panel.placing == 3
								&& control.panel.credits >= 200) {
							control.panel.boxList[i][x].newTowerTwo(
									control.panel.boxList[i][x].getLeftX(),
									control.panel.boxList[i][x].getTopY());
							control.panel.credits = control.panel.credits - 200;
						} else if (control.panel.placing == 4
								&& control.panel.credits >= 1000) {
							control.panel.boxList[i][x].newTowerThree(
									control.panel.boxList[i][x].getLeftX(),
									control.panel.boxList[i][x].getTopY());
							control.panel.credits = control.panel.credits - 1000;
						} else if (control.panel.placing == 5
								&& control.panel.credits >= 2500) {
							control.panel.boxList[i][x].newTowerFour(
									control.panel.boxList[i][x].getLeftX(),
									control.panel.boxList[i][x].getTopY());
							control.panel.credits = control.panel.credits - 2500;
						} else if (control.panel.placing == 6
								&& control.panel.credits >= 5000) {
							control.panel.boxList[i][x].newTowerFive(
									control.panel.boxList[i][x].getLeftX(),
									control.panel.boxList[i][x].getTopY());
							control.panel.credits = control.panel.credits - 5000;
						}
						control.panel.placing = 0;
						control.panel.receivingSpotChoice = false;

					}
				}
			}
			control.panel.update();
		}

		else if (xClick >= 0 && xClick <= 100 && yClick >= 900
				&& yClick <= 1000 && !control.panel.roundIn) {
			control.panel.generateEnemies();
			int actualEnemies = control.panel.weakEnemyList.size()
					+ control.panel.averageEnemyList.size()
					+ control.panel.strongEnemyList.size()
					+ control.panel.bossEnemyList.size();

			System.out.println("Round: " + control.panel.round);
			System.out.println("Round now In");
			System.out.println("Credits on Round Start: "
					+ control.panel.credits);
			System.out.println("Predicted Enemies: " + control.panel.enemies);
			System.out.println("Actual Enemies: " + (actualEnemies));

			control.startRound();
		} else if (xClick >= 0 && xClick <= 100 && yClick >= 800
				&& yClick < 900 && control.panel.roundIn) {
			System.out.println("speed button clicked");
			if (control.panel.spedUp) {
				control.panel.spedUp = false;
			} else if (!control.panel.spedUp) {
				control.panel.spedUp = true;
			}

		}

		else if (xClick > 0 && xClick <= 100 && yClick >= 100 && yClick <= 200) {
			if (!control.panel.receivingSpotChoice
					&& control.panel.credits >= 75) {
				System.out.println("Tower 1 Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 2;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Placement Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 200 && yClick <= 300) {
			if (!control.panel.receivingSpotChoice
					&& control.panel.credits >= 200) {
				System.out.println("Tower 2 Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 3;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Placement Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 300 && yClick <= 400) {
			if (!control.panel.receivingSpotChoice
					&& control.panel.credits >= 1000) {
				System.out.println("Tower 3 Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 4;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Placement Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 400 && yClick <= 500) {
			if (!control.panel.receivingSpotChoice
					&& control.panel.credits >= 2500) {
				System.out.println("Tower 4 Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 5;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Placement Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 500 && yClick <= 600) {
			if (!control.panel.receivingSpotChoice
					&& control.panel.credits >= 5000) {
				System.out.println("Tower 5 Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 6;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Placement Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 600 && yClick <= 700) {
			if (!control.panel.receivingSpotChoice) {
				System.out.println("Delete Clicked");
				control.panel.receivingSpotChoice = true;
				control.panel.placing = 0;
			} else if (control.panel.receivingSpotChoice) {
				System.out.println("Delete Mode Exited");
				control.panel.receivingSpotChoice = false;
				control.panel.placing = 0;
			}
			control.panel.update();
		} else if (xClick > 0 && xClick <= 100 && yClick > 700 && yClick <= 800) {
				JOptionPane.showMessageDialog(
						null,
						"Welcome to Tower Defence! \n The goal of this game is to prevent enemies from reaching the base by placing towers along the path. \n Different towers have different stats, so choose wisely. The game will progressively speed up, so keep adding! \n Deleting towers will give you no credits in return (soon to be changed), so plan carefully.\n Please give me as much feedback as possible so I can continue to update the game! \n Enjoy!");
		}
		else if(control.panel.getGameOverStatus() && xClick >= 600 && xClick <= 800 && yClick >= 600 && yClick <= 800){
			control.panel.generateBoxList();
			control.panel.credits = 100;
			control.panel.baseHealth = 200;
			control.panel.round = 0;
			control.panel.weakEnemyList.clear();
			control.panel.averageEnemyList.clear();
			control.panel.strongEnemyList.clear();
			control.panel.bossEnemyList.clear();
			control.panel.update();
		}
		else if(control.panel.getGameOverStatus() && xClick >= 1000 && xClick <= 1200 && yClick >= 600 && yClick <= 800){
			System.exit(0);
		}

	}

	public void startRound() {
		int delay = 30;

		ActionListener taskPerformer = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				// ...Perform a task...

				control.panel.moveEnemies(); // calls enemy movement

				// ////////////////////////////

				control.panel.updateRoundStatus();

				// ////////////////////////////

				if (control.panel.getGameOverStatus()) { // checks if game has
															// ended
					timer.setDelay(750);// stops timer
					control.panel.update();// one final update to show death
											// screen
				}

				// ///////////////////////////
				if (!control.panel.getGameOverStatus()) {
					if (control.panel.checkSpedUp() && timer.getDelay() == 30) {
						timer.setDelay(timer.getDelay() / 3);
					} else {
						timer.setDelay(30); // checks if game has been sped up,
											// and alters delay accordingly
					}
				}

				// /////////////////////////////

				control.panel.update(); // updates the panel

				// /////////////////////////////

				control.checkStopTimer(); // checks if the timer needs to stop
											// due to round ending

				if (control.panel.shootClock < 12) {
					control.panel.shootClock++;
				} else {
					control.panel.shootClock = 0;
				}
			}
		};

		timer = new Timer(delay, taskPerformer);
		timer.start();

	}

	public void checkStopTimer() {
		if (!control.panel.roundIn) {
			control.panel.spedUp = false;
			timer.stop();
			control.panel.update();
		}
	}

	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}
