import java.awt.Color;
import java.util.ArrayList;

public class tower {

	int cost;
	int range;
	int damage;

	int centerX;
	int centerY;
	int coefficientX;
	int coefficientY;

	int home1X;
	int home1Y;
	int home2X;
	int home2Y;
	int home3X;
	int home3Y;
	int home4X;
	int home4Y;

	int home1XPrime;
	int home1YPrime;
	int home2XPrime;
	int home2YPrime;
	int home3XPrime;
	int home3YPrime;
	int home4XPrime;
	int home4YPrime;

	int relativeHome1X;
	int relativeHome1Y;
	int relativeHome2X;
	int relativeHome2Y;
	int relativeHome3X;
	int relativeHome3Y;
	int relativeHome4X;
	int relativeHome4Y;

	int relativeHome1XPrime;
	int relativeHome1YPrime;
	int relativeHome2XPrime;
	int relativeHome2YPrime;
	int relativeHome3XPrime;
	int relativeHome3YPrime;
	int relativeHome4XPrime;
	int relativeHome4YPrime;
	
	int targetX;
	int targetY;

	int[] xArray;
	int[] yArray;

	Color towerColor;
	
	String targetType;
	int targetIndex;

	public void findTarget(ArrayList<enemy> weakEnemyList,
			ArrayList<enemy> averageEnemyList,
			ArrayList<enemy> strongEnemyList, ArrayList<enemy> bossEnemyList) {

		int furthestWeakDistance = 0;
		int furthestAverageDistance = 0;
		int furthestStrongDistance = 0;
		int furthestBossDistance = 0;

		targetX = coefficientX + 50;
		targetY = coefficientY;

		for (int i = 0; i < weakEnemyList.size() && weakEnemyList.size() > 0; i++) {
			int targetCenterX = weakEnemyList.get(i).getCenterX();
			int targetCenterY = weakEnemyList.get(i).getCenterY();
			
			int xDifference = Math.abs(centerX - targetCenterX);
			int yDifference = Math.abs(centerY - targetCenterY);
			
			double totalDifference = Math.sqrt((xDifference * xDifference)
					+ (yDifference * yDifference));
			
			if (totalDifference <= range) {
				if (weakEnemyList.get(i).getDistanceTraveled() >= furthestWeakDistance) {
					targetX = weakEnemyList.get(i).getCenterX();
					targetY = weakEnemyList.get(i).getCenterY();
					furthestWeakDistance = weakEnemyList.get(i)
							.getDistanceTraveled();
					targetType = "weak";
					targetIndex = i;
				}
			}
			
		}
		
		for (int i = 0; i < averageEnemyList.size()
				&& averageEnemyList.size() > 0; i++) {
			int targetCenterX = averageEnemyList.get(i).getCenterX();
			int targetCenterY = averageEnemyList.get(i).getCenterY();
			int xDifference = Math.abs(centerX - targetCenterX);
			int yDifference = Math.abs(centerY - targetCenterY);
			double totalDifference = Math.sqrt((xDifference * xDifference)
					+ (yDifference * yDifference));
			if (totalDifference <= range) {
				if (averageEnemyList.get(i).getDistanceTraveled() >= furthestAverageDistance) {
					targetX = averageEnemyList.get(i).getCenterX();
					targetY = averageEnemyList.get(i).getCenterY();
					furthestAverageDistance = averageEnemyList.get(i)
							.getDistanceTraveled();
					targetType = "average";
					targetIndex = i;
				}
			}
		}
		for (int i = 0; i < strongEnemyList.size()
				&& strongEnemyList.size() > 0; i++) {
			int targetCenterX = strongEnemyList.get(i).getCenterX();
			int targetCenterY = strongEnemyList.get(i).getCenterY();
			int xDifference = Math.abs(centerX - targetCenterX);
			int yDifference = Math.abs(centerY - targetCenterY);
			double totalDifference = Math.sqrt((xDifference * xDifference)
					+ (yDifference * yDifference));
			if (totalDifference <= range) {
				if (strongEnemyList.get(i).getDistanceTraveled() >= furthestStrongDistance) {
					targetX = strongEnemyList.get(i).getCenterX();
					targetY = strongEnemyList.get(i).getCenterY();
					furthestStrongDistance = strongEnemyList.get(i)
							.getDistanceTraveled();
					targetType = "strong";
					targetIndex = i;
				}
			}
		}
		for (int i = 0; i < bossEnemyList.size() && bossEnemyList.size() > 0; i++) {
			int targetCenterX = bossEnemyList.get(i).getCenterX();
			int targetCenterY = bossEnemyList.get(i).getCenterY();
			int xDifference = Math.abs(centerX - targetCenterX);
			int yDifference = Math.abs(centerY - targetCenterY);
			double totalDifference = Math.sqrt((xDifference * xDifference)
					+ (yDifference * yDifference));
			if (totalDifference <= range) {
				if (bossEnemyList.get(i).getDistanceTraveled() >= furthestBossDistance) {
					targetX = bossEnemyList.get(i).getCenterX();
					targetY = bossEnemyList.get(i).getCenterY();
					furthestBossDistance = bossEnemyList.get(i)
							.getDistanceTraveled();
					targetType = "boss";
					targetIndex = i;
				}
			}
		}

		if (targetX != coefficientX + 50 && targetY != coefficientY) {
			rotateTower(targetX, targetY);
		}
	}

	public void rotateTower(int targetX, int targetY) {

		int xDifference = Math.abs(centerX - targetX);
		int yDifference = Math.abs(centerY - targetY);

		double theta = 0;

		if (targetX < centerX && targetY == centerY) {
			theta = Math.toRadians(90);
		} else if (targetX == centerX && targetY < centerY) {
			theta = Math.toRadians(180);
		} else if (targetX > centerX && targetY == centerY) {
			theta = Math.toRadians(270);
		} else if (targetX == centerX && targetY > centerY) {
			theta = Math.toRadians(0);
		} else {
			double ratio = (double) xDifference / (double) yDifference;
			if (targetX < centerX && targetY < centerY) {
				theta = Math.atan(ratio);
			} else if (targetX < centerX && targetY > centerY) {
				theta = Math.toRadians(180) - Math.atan(ratio);
			} else if (targetX > centerX && targetY > centerY) {
				theta = Math.toRadians(180) + Math.atan(ratio);
			} else if (targetX > centerX && targetY < centerY) {
				theta = -Math.atan(ratio);
			}
		}

		relativeHome1XPrime = (int) ((relativeHome1X * Math.cos(theta)) - (relativeHome1Y * Math
				.sin(theta)));
		relativeHome1YPrime = (int) ((relativeHome1X * Math.sin(theta)) + (relativeHome1Y * Math
				.cos(theta)));

		relativeHome2XPrime = (int) ((relativeHome2X * Math.cos(theta)) - (relativeHome2Y * Math
				.sin(theta)));
		relativeHome2YPrime = (int) ((relativeHome2X * Math.sin(theta)) + (relativeHome2Y * Math
				.cos(theta)));

		relativeHome3XPrime = (int) ((relativeHome3X * Math.cos(theta)) - (relativeHome3Y * Math
				.sin(theta)));
		relativeHome3YPrime = (int) ((relativeHome3X * Math.sin(theta)) + (relativeHome3Y * Math
				.cos(theta)));

		relativeHome4XPrime = (int) ((relativeHome4X * Math.cos(theta)) - (relativeHome4Y * Math
				.sin(theta)));
		relativeHome4YPrime = (int) ((relativeHome4X * Math.sin(theta)) + (relativeHome4Y * Math
				.cos(theta)));

		home1XPrime = coefficientX + (50 + relativeHome1XPrime);
		home1YPrime = coefficientY + (50 - relativeHome1YPrime);

		home2XPrime = coefficientX + (relativeHome2XPrime + 50);
		home2YPrime = coefficientY + (50 - relativeHome2YPrime);

		home3XPrime = coefficientX + (relativeHome3XPrime + 50);
		home3YPrime = coefficientY + (50 - relativeHome3YPrime);

		home4XPrime = coefficientX + (relativeHome4XPrime + 50);
		home4YPrime = coefficientY + (50 - relativeHome4YPrime);

		xArray[0] = home1XPrime;
		xArray[1] = home2XPrime;
		xArray[2] = home3XPrime;
		xArray[3] = home4XPrime;

		yArray[0] = home1YPrime;
		yArray[1] = home2YPrime;
		yArray[2] = home3YPrime;
		yArray[3] = home4YPrime;

	}

}
