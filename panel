import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.util.ArrayList;

import javax.swing.JPanel;

public class panel extends JPanel {

	// JButton start;
	boolean roundIn;
	boolean spedUp;
	int enemies;
	int enemiesLeft;
	int round;
	int credits;
	int baseHealth;
	int placing;
	boolean receivingSpotChoice;
	
	int shootClock;

	boolean tower1Shoot;
	boolean tower2Shoot;
	boolean tower3Shoot;
	boolean tower4Shoot;
	boolean tower5Shoot;

	box[][] boxList;

	ArrayList<enemy> weakEnemyList;
	ArrayList<enemy> averageEnemyList;
	ArrayList<enemy> strongEnemyList;
	ArrayList<enemy> bossEnemyList;

	public Dimension getPreferredSize() {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		int width = screenSize.width;
		int height = screenSize.height;
		System.out.println(width + " , " + height);
		return new Dimension((int) width, (int) height);
	}

	public panel() {

		System.out.println("Panel Made");

		roundIn = false;
		round = 0;
		enemiesLeft = 0;
		credits = 100;
		baseHealth = 200;

		spedUp = false;
		placing = 0;
		
		shootClock = 0;

		weakEnemyList = new ArrayList<enemy>();
		averageEnemyList = new ArrayList<enemy>();
		strongEnemyList = new ArrayList<enemy>();
		bossEnemyList = new ArrayList<enemy>();

		generateBoxList();

		setBackground(new Color(0, 153, 51));

	}

	public void generateBoxList() {
		boxList = new box[10][18];

		for (int i = 0; i < 10; i++) {
			for (int x = 0; x < 18; x++) {
				boxList[i][x] = new box(x, i, 0);
			}
			System.out.println();
		}

		for (int i = 0; i < 10; i++) {
			boxList[i][0] = new box(0, i, 1);
		}
		for (int i = 0; i < 17; i++) {
			boxList[9][i] = new box(i, 9, 1);
		}

		boxList[8][16] = new box(16, 8, 1);

		for (int i = 2; i < 17; i++) {
			boxList[7][i] = new box(i, 7, 1);
		}

		boxList[6][2] = new box(2, 6, 1);

		for (int i = 2; i < 17; i++) {
			boxList[5][i] = new box(i, 5, 1);
		}

		boxList[4][16] = new box(16, 4, 1);

		for (int i = 2; i < 17; i++) {
			boxList[3][i] = new box(i, 3, 1);
		}

		boxList[2][2] = new box(2, 2, 1);

		for (int i = 2; i < 18; i++) {
			boxList[1][i] = new box(i, 1, 1);
		}

		for (int i = 0; i < 10; i++) {
			for (int x = 0; x < 18; x++) {
				System.out.print(boxList[i][x].getContents() + "  ");
			}
			System.out.println();
		}

	}

	public int getEnemies(int round) {
		int x = (round * round);
		x = x + 8;
		return x;
	}

	public void generateEnemies() {
		roundIn = true;
		round++;
		enemies = getEnemies(round);
		enemiesLeft = enemies;

		if (round <= 5) {
			for (int i = 0; i < enemies; i++) {
				weakEnemyList.add(new weakEnemy(i * -100, i * -100));
				weakEnemyList.get(i).setSpeed(weakEnemyList.get(i).getSpeed() + (5-(5-round))* 2);
			}
		} else if (round > 5 && round <= 10) {
			int x = 0;
			for (int i = 0; i < (enemies / 3) * 2; i++) {
				weakEnemyList.add(new weakEnemy(x * -100, x * -100));
				weakEnemyList.get(i).setSpeed(weakEnemyList.get(i).getSpeed() + (5-(10-round))* 2);
				x++;
			}
			for (int i = 0; i < enemies / 3; i++) {
				averageEnemyList.add(new averageEnemy(x * -100, x * -100));
				averageEnemyList.get(i).setSpeed(averageEnemyList.get(i).getSpeed() + (5-(10-round))* 2);
				x++;
			}
		} else if (round > 10 && round <= 15) {
			int x = 0;
			for (int i = 0; i < (enemies / 2); i++) {
				weakEnemyList.add(new weakEnemy(x * -100, x * -100));
				weakEnemyList.get(i).setSpeed(weakEnemyList.get(i).getSpeed() + (5-(15-round))* 2);
				x++;
			}
			for (int i = 0; i < enemies / 2; i++) {
				averageEnemyList.add(new averageEnemy(x * -100, x * -100));
				averageEnemyList.get(i).setSpeed(averageEnemyList.get(i).getSpeed() + (5-(15-round))* 2);
				x++;
			}
		} else if (round > 15 && round < 20) {
			int x = 0;
			for (int i = 0; i < (enemies / 3); i++) {
				weakEnemyList.add(new weakEnemy(x * -100, x * -100));
				weakEnemyList.get(i).setSpeed(weakEnemyList.get(i).getSpeed() + (5-(20-round))* 2);
				x++;
			}
			for (int i = 0; i < enemies / 3; i++) {
				averageEnemyList.add(new averageEnemy(x * -100, x * -100));
				averageEnemyList.get(i).setSpeed(averageEnemyList.get(i).getSpeed() + (5-(20-round))* 2);
				x++;
			}
			for (int i = 0; i < enemies / 3; i++) {
				strongEnemyList.add(new strongEnemy(x * -100, x * -100));
				strongEnemyList.get(i).setSpeed(strongEnemyList.get(i).getSpeed() + (5-(20-round))* 2);
				x++;
			}
		} else if (round == 20) {
			bossEnemyList.add(new bossEnemy(-100, -100));
		} else if (round > 20) {
			int x = 0;
			for (int i = 0; i < (enemies / 3); i++) {
				weakEnemyList.add(new weakEnemy(i * -100, i * -100));
				if(round > 21){
					weakEnemyList.get(i).setSpeed(weakEnemyList.get(i).getSpeed() + 2*(round-21));
				}
				x++;
			}
			for (int i = 0; i < enemies / 3; i++) {
				averageEnemyList.add(new averageEnemy(i * -100, i * -100));
				if(round > 21){
					averageEnemyList.get(i).setSpeed(averageEnemyList.get(i).getSpeed() + 2*(round-21));
				}
			}
			for (int i = 0; i < enemies / 3; i++) {
				strongEnemyList.add(new strongEnemy(i * -100, i * -100));
				if(round > 21){
					strongEnemyList.get(i).setSpeed(strongEnemyList.get(i).getSpeed() + 2*(round-21));
				}
			}
			bossEnemyList.add(new bossEnemy(x * -100, x * -100));
			if(round > 21){
				bossEnemyList.get(0).setSpeed(weakEnemyList.get(0).getSpeed() + 2*(round-21));
			}
		}
	}

	public void paintComponent(Graphics g) {

		super.paintComponent(g);

		g.setColor(new Color(255, 204, 102));
		g.fillRoundRect(100, -50, 100, 1000, 50, 50);
		g.fillRoundRect(100, 900, 1700, 100, 50, 50);
		g.fillRoundRect(1700, 700, 100, 250, 50, 50);
		g.fillRoundRect(300, 700, 1500, 100, 50, 50);
		g.fillRoundRect(300, 500, 100, 250, 50, 50); // creates path that
														// enemies travel
		g.fillRoundRect(300, 500, 1500, 100, 50, 50);
		g.fillRoundRect(1700, 300, 100, 250, 50, 50);
		g.fillRoundRect(300, 300, 1500, 100, 50, 50);
		g.fillRoundRect(300, 100, 100, 250, 50, 50);
		g.fillRoundRect(300, 100, 1700, 100, 50, 50);

		// ///////////////////////////////////////////////
		// /static images of towers and stats on left hand side

		int[] sideX = new int[4];
		int[] sideY = new int[4];

		g.setColor(new Color(255, 255, 0));
		int coefficientX = 0;
		int coefficientY = 100;
		sideX[0] = coefficientX + 50;
		sideX[1] = coefficientX + 10;
		sideX[2] = coefficientX + 50;
		sideX[3] = coefficientX + 90;
		sideY[0] = coefficientY + 10;
		sideY[1] = coefficientY + 85;
		sideY[2] = coefficientY + 70;
		sideY[3] = coefficientY + 85;
		g.fillPolygon(sideX, sideY, 4);

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 18));
		g.drawString("Cost: 75", coefficientX + 5, coefficientY + 20);
		g.drawString("Range: 100", coefficientX + 5, coefficientY + 40);
		g.drawString("Damage: 10", coefficientX + 5, coefficientY + 60);

		g.setColor(new Color(255, 169, 0));
		coefficientX = 0;
		coefficientY = 200;
		sideX[0] = coefficientX + 50;
		sideX[1] = coefficientX + 10;
		sideX[2] = coefficientX + 50;
		sideX[3] = coefficientX + 90;
		sideY[0] = coefficientY + 10;
		sideY[1] = coefficientY + 85;
		sideY[2] = coefficientY + 70;
		sideY[3] = coefficientY + 85;
		g.fillPolygon(sideX, sideY, 4);

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 18));
		g.drawString("Cost: 200", coefficientX + 5, coefficientY + 20);
		g.drawString("Range: 300", coefficientX + 5, coefficientY + 40);
		g.drawString("Damage: 10", coefficientX + 5, coefficientY + 60);

		g.setColor(new Color(233, 0, 132));
		coefficientX = 0;
		coefficientY = 300;
		sideX[0] = coefficientX + 50;
		sideX[1] = coefficientX + 10;
		sideX[2] = coefficientX + 50;
		sideX[3] = coefficientX + 90;
		sideY[0] = coefficientY + 10;
		sideY[1] = coefficientY + 85;
		sideY[2] = coefficientY + 70;
		sideY[3] = coefficientY + 85;
		g.fillPolygon(sideX, sideY, 4);

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 18));
		g.drawString("Cost: 1000", coefficientX + 5, coefficientY + 20);
		g.drawString("Range: 100", coefficientX + 5, coefficientY + 40);
		g.drawString("Damage: 20", coefficientX + 5, coefficientY + 60);

		g.setColor(new Color(12, 84, 184));
		coefficientX = 0;
		coefficientY = 400;
		sideX[0] = coefficientX + 50;
		sideX[1] = coefficientX + 10;
		sideX[2] = coefficientX + 50;
		sideX[3] = coefficientX + 90;
		sideY[0] = coefficientY + 10;
		sideY[1] = coefficientY + 85;
		sideY[2] = coefficientY + 70;
		sideY[3] = coefficientY + 85;
		g.fillPolygon(sideX, sideY, 4);

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 18));
		g.drawString("Cost: 2500", coefficientX + 5, coefficientY + 20);
		g.drawString("Range: 400", coefficientX + 5, coefficientY + 40);
		g.drawString("Damage: 20", coefficientX + 5, coefficientY + 60);

		g.setColor(new Color(69, 255, 10));
		coefficientX = 0;
		coefficientY = 500;
		sideX[0] = coefficientX + 50;
		sideX[1] = coefficientX + 10;
		sideX[2] = coefficientX + 50;
		sideX[3] = coefficientX + 90;
		sideY[0] = coefficientY + 10;
		sideY[1] = coefficientY + 85;
		sideY[2] = coefficientY + 70;
		sideY[3] = coefficientY + 85;
		g.fillPolygon(sideX, sideY, 4);

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 18));
		g.drawString("Cost: 5000", coefficientX + 5, coefficientY + 20);
		g.drawString("Range: 500", coefficientX + 5, coefficientY + 40);
		g.drawString("Damage: 30", coefficientX + 5, coefficientY + 60);
		g.setFont(new Font("Calibri", Font.BOLD, 25));
		
		g.setColor(Color.RED);
		g.drawLine(0 ,600 , 100, 700);
		g.drawLine(1, 600, 101, 700);
		g.drawLine(0, 700, 100, 600);
		g.drawLine(1 , 700 , 101 , 600);
		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 25));
		g.drawString("Delete",18,655);
		
		if(!receivingSpotChoice){
			g.setColor(Color.BLACK);
			g.setFont(new Font("Calibri", Font.BOLD, 80));
			g.drawString("!", 37, 765);
			g.setFont(new Font("Calibri", Font.BOLD, 25));
			g.drawString("Info", 30, 790);
		}
		// ////////////////////////////////////////////////////////////
		
		g.setFont(new Font("Calibri", Font.BOLD, 25));
		
		if (roundIn == false) {
			g.setColor(Color.GREEN);
			g.fillRect(0, 900, 100, 100);
			g.setColor(Color.BLACK);
			g.drawString("Start", 25, 955); // creates start box in bottom left
		} else if (roundIn == true) {
			g.setColor(Color.RED);
			g.fillRect(0, 900, 100, 100);
		}

		// ////////////////////////////////////////////////////////////

		if (!spedUp) {
			g.setColor(Color.BLUE);
			g.fillRect(0, 800, 100, 100);
			g.setColor(Color.BLACK);
			g.drawString("Speed Up", 0, 855);
		} else if (spedUp) {
			g.setFont(new Font("Calibri", Font.PLAIN, 20)); // creates speed up
															// box in bottom
															// left
			g.setColor(Color.MAGENTA);
			g.fillRect(0, 800, 100, 100);
			g.setColor(Color.BLACK);
			g.drawString("Slow Down", 0, 855);
		}

		// ////////////////////////////////////////////////////////////////
		
		
		g.setFont(new Font("Calibri", Font.PLAIN, 11));
		g.setColor(new Color(153, 204, 255, 100));
		for (int i = 1; i < 20; i++) {
			g.drawLine(i * 100, 0, i * 100, 1000); // creates faded grid lines
													// that show tower locations
		}
		for (int i = 1; i < 15; i++) {
			g.drawLine(100, i * 100, 1900, i * 100);
		}
		
		// /////////////////////////////////////////////////////////////////

		g.setColor(Color.BLACK);
		g.setFont(new Font("Calibri", Font.BOLD, 20));
		g.drawString("Towers", 15, 90);
		g.drawString("Health: " + baseHealth, 1801, 125); // prints text about
															// the game data
		g.drawString("Credits: " + credits, 0, 50);
		g.drawString("Round: " + round, 0, 25);

		// /////////////////////////////////////////////////////////////////

		for (int i = 0; i < weakEnemyList.size(); i++) {
			g.setColor(Color.RED);
			g.fillRect(weakEnemyList.get(i).getXCoord(), weakEnemyList.get(i)
					.getYCoord(), weakEnemyList.get(i).getWidth(),
					weakEnemyList.get(i).getHeight());
		}
		for (int i = 0; i < averageEnemyList.size(); i++) {
			g.setColor(Color.BLUE);
			g.fillRect(averageEnemyList.get(i).getXCoord(), averageEnemyList // creates
																				// all
																				// enemies
																				// at
																				// their
					.get(i).getYCoord(), averageEnemyList.get(i).getWidth(), // starting
																				// coordinates
					averageEnemyList.get(i).getHeight());
		}
		for (int i = 0; i < strongEnemyList.size(); i++) {
			g.setColor(new Color(0, 153, 0));
			g.fillRect(strongEnemyList.get(i).getXCoord(),
					strongEnemyList.get(i).getYCoord(), strongEnemyList.get(i)
							.getWidth(), strongEnemyList.get(i).getHeight());
		}
		for (int i = 0; i < bossEnemyList.size(); i++) {
			g.setColor(Color.BLACK);
			g.fillRect(bossEnemyList.get(i).getXCoord(), bossEnemyList.get(i)
					.getYCoord(), bossEnemyList.get(i).getWidth(),
					bossEnemyList.get(i).getHeight());
		}

		// //////////////////////////////////////////////////////////////////////

		if (receivingSpotChoice) {
			g.setFont(new Font("Calibri", Font.PLAIN, 20));
			g.setColor(new Color(0, 255, 0, 100));
			for (int i = 0; i < 10; i++) {
				for (int x = 0; x < 18; x++) {
					if (boxList[i][x].getContents() == 0) {
						g.fillRect(boxList[i][x].getLeftX(),
								boxList[i][x].getTopY(), 100, 100);
						g.drawString("Build", boxList[i][x].getLeftX() + 25,
								boxList[i][x].getTopY() + 45);
					}
				}
			} // prints "Build" text when player is creating new tower
			
			g.setFont(new Font("Calibri", Font.BOLD, 30));
			g.setColor(Color.BLACK);
			g.drawString("Cancel", 12, 750);
			
		}

		// //////////////////////////////////////////////////////////////////////

		for (int i = 0; i < 10; i++) {
			for (int x = 0; x < 18; x++) {

				if (boxList[i][x].getContents() == 2) {
					g.setColor(boxList[i][x].tower1.towerColor);
					g.fillPolygon(boxList[i][x].tower1.xArray,
							boxList[i][x].tower1.yArray, 4);
					if(shootClock >=0 && shootClock <= 3 && boxList[i][x].tower1.targetX != boxList[i][x].tower1.coefficientX+50 && boxList[i][x].tower1.targetY != boxList[i][x].tower1.coefficientY){
						g.setColor(Color.BLACK);
						g.drawLine(boxList[i][x].tower1.home1XPrime, boxList[i][x].tower1.home1YPrime, boxList[i][x].tower1.targetX , boxList[i][x].tower1.targetY);
						if(boxList[i][x].tower1.targetType == "weak" && shootClock ==2){
							weakEnemyList.get(boxList[i][x].tower1.targetIndex).health = weakEnemyList.get(boxList[i][x].tower1.targetIndex).health - boxList[i][x].tower1.damage;
						}
						else if(boxList[i][x].tower1.targetType == "average" && shootClock ==2){
							averageEnemyList.get(boxList[i][x].tower1.targetIndex).health = averageEnemyList.get(boxList[i][x].tower1.targetIndex).health - boxList[i][x].tower1.damage;
						}
						else if(boxList[i][x].tower1.targetType == "strong" && shootClock ==2){
							strongEnemyList.get(boxList[i][x].tower1.targetIndex).health = strongEnemyList.get(boxList[i][x].tower1.targetIndex).health - boxList[i][x].tower1.damage;
						}
						else if(boxList[i][x].tower1.targetType == "boss" && shootClock ==2){
							bossEnemyList.get(boxList[i][x].tower1.targetIndex).health = bossEnemyList.get(boxList[i][x].tower1.targetIndex).health - boxList[i][x].tower1.damage;
						}
					}
				} else if (boxList[i][x].getContents() == 3) {
					g.setColor(boxList[i][x].tower2.towerColor);
					g.fillPolygon(boxList[i][x].tower2.xArray,
							boxList[i][x].tower2.yArray, 4);
					if(shootClock >=4 && shootClock <= 7 && boxList[i][x].tower2.targetX != boxList[i][x].tower2.coefficientX+50 && boxList[i][x].tower2.targetY != boxList[i][x].tower2.coefficientY){
						g.setColor(Color.BLACK);
						g.drawLine(boxList[i][x].tower2.home1XPrime, boxList[i][x].tower2.home1YPrime, boxList[i][x].tower2.targetX , boxList[i][x].tower2.targetY);
						if(boxList[i][x].tower2.targetType == "weak" && shootClock ==6){
							weakEnemyList.get(boxList[i][x].tower2.targetIndex).health = weakEnemyList.get(boxList[i][x].tower2.targetIndex).health - boxList[i][x].tower2.damage;
	
						}
						else if(boxList[i][x].tower2.targetType == "average" && shootClock ==6){
							averageEnemyList.get(boxList[i][x].tower2.targetIndex).health = averageEnemyList.get(boxList[i][x].tower2.targetIndex).health - boxList[i][x].tower2.damage;
						}
						else if(boxList[i][x].tower2.targetType == "strong" && shootClock ==6){
							strongEnemyList.get(boxList[i][x].tower2.targetIndex).health = strongEnemyList.get(boxList[i][x].tower2.targetIndex).health - boxList[i][x].tower2.damage;
						}
						else if(boxList[i][x].tower2.targetType == "boss" && shootClock ==6){
							bossEnemyList.get(boxList[i][x].tower2.targetIndex).health = bossEnemyList.get(boxList[i][x].tower2.targetIndex).health - boxList[i][x].tower2.damage;
						}
					}
				} else if (boxList[i][x].getContents() == 4) {
					g.setColor(boxList[i][x].tower3.towerColor);
					g.fillPolygon(boxList[i][x].tower3.xArray,
							boxList[i][x].tower3.yArray, 4);
					if(shootClock >=8 && shootClock <= 11 && boxList[i][x].tower3.targetX != boxList[i][x].tower3.coefficientX+50 && boxList[i][x].tower3.targetY != boxList[i][x].tower3.coefficientY){
						g.setColor(Color.BLACK);
						g.drawLine(boxList[i][x].tower3.home1XPrime, boxList[i][x].tower3.home1YPrime, boxList[i][x].tower3.targetX , boxList[i][x].tower3.targetY);
						if(boxList[i][x].tower3.targetType == "weak" && shootClock ==10){
							weakEnemyList.get(boxList[i][x].tower3.targetIndex).health = weakEnemyList.get(boxList[i][x].tower3.targetIndex).health - boxList[i][x].tower3.damage;
						}
						else if(boxList[i][x].tower3.targetType == "average" && shootClock ==10){
							averageEnemyList.get(boxList[i][x].tower3.targetIndex).health = averageEnemyList.get(boxList[i][x].tower3.targetIndex).health - boxList[i][x].tower3.damage;
						}
						else if(boxList[i][x].tower3.targetType == "strong" && shootClock ==10){
							strongEnemyList.get(boxList[i][x].tower3.targetIndex).health = strongEnemyList.get(boxList[i][x].tower3.targetIndex).health - boxList[i][x].tower3.damage;
						}
						else if(boxList[i][x].tower3.targetType == "boss" && shootClock ==10){
							bossEnemyList.get(boxList[i][x].tower3.targetIndex).health = bossEnemyList.get(boxList[i][x].tower3.targetIndex).health - boxList[i][x].tower3.damage;
						}
					}
				} else if (boxList[i][x].getContents() == 5) {
					g.setColor(boxList[i][x].tower4.towerColor);
					g.fillPolygon(boxList[i][x].tower4.xArray,
							boxList[i][x].tower4.yArray, 4);
					if(shootClock >=0 && shootClock <= 3 && boxList[i][x].tower4.targetX != boxList[i][x].tower4.coefficientX+50 && boxList[i][x].tower4.targetY != boxList[i][x].tower4.coefficientY){
						g.setColor(Color.BLACK);
						g.drawLine(boxList[i][x].tower4.home1XPrime, boxList[i][x].tower4.home1YPrime, boxList[i][x].tower4.targetX , boxList[i][x].tower4.targetY);
						if(boxList[i][x].tower4.targetType == "weak" && shootClock ==1){
							weakEnemyList.get(boxList[i][x].tower4.targetIndex).health = weakEnemyList.get(boxList[i][x].tower4.targetIndex).health - boxList[i][x].tower4.damage;
						}
						else if(boxList[i][x].tower4.targetType == "average" && shootClock ==1){
							averageEnemyList.get(boxList[i][x].tower4.targetIndex).health = averageEnemyList.get(boxList[i][x].tower4.targetIndex).health - boxList[i][x].tower4.damage;
						}
						else if(boxList[i][x].tower4.targetType == "strong" && shootClock ==1){
							strongEnemyList.get(boxList[i][x].tower4.targetIndex).health = strongEnemyList.get(boxList[i][x].tower4.targetIndex).health - boxList[i][x].tower4.damage;
						}
						else if(boxList[i][x].tower4.targetType == "boss" && shootClock ==1){
							bossEnemyList.get(boxList[i][x].tower4.targetIndex).health = bossEnemyList.get(boxList[i][x].tower4.targetIndex).health - boxList[i][x].tower4.damage;
						}
					}
				} else if (boxList[i][x].getContents() == 6) {
					g.setColor(boxList[i][x].tower5.towerColor);
					g.fillPolygon(boxList[i][x].tower5.xArray,
							boxList[i][x].tower5.yArray, 4);
					if(shootClock >=4 && shootClock <= 7 && boxList[i][x].tower5.targetX != boxList[i][x].tower5.coefficientX+50 && boxList[i][x].tower5.targetY != boxList[i][x].tower5.coefficientY){
						g.setColor(Color.BLACK);
						g.drawLine(boxList[i][x].tower5.home1XPrime, boxList[i][x].tower5.home1YPrime, boxList[i][x].tower5.targetX , boxList[i][x].tower5.targetY);
						if(boxList[i][x].tower5.targetType == "weak" && shootClock ==5){
							weakEnemyList.get(boxList[i][x].tower5.targetIndex).health = weakEnemyList.get(boxList[i][x].tower5.targetIndex).health - boxList[i][x].tower5.damage;
						}
						else if(boxList[i][x].tower5.targetType == "average" && shootClock ==5){
							averageEnemyList.get(boxList[i][x].tower5.targetIndex).health = averageEnemyList.get(boxList[i][x].tower5.targetIndex).health - boxList[i][x].tower5.damage;
						}
						else if(boxList[i][x].tower5.targetType == "strong" && shootClock ==5){
							strongEnemyList.get(boxList[i][x].tower5.targetIndex).health = strongEnemyList.get(boxList[i][x].tower5.targetIndex).health - boxList[i][x].tower5.damage;
						}
						else if(boxList[i][x].tower5.targetType == "boss" && shootClock ==5){
							bossEnemyList.get(boxList[i][x].tower5.targetIndex).health = bossEnemyList.get(boxList[i][x].tower5.targetIndex).health - boxList[i][x].tower5.damage;
						}
					}
				}
			} // creates all towers
		}
		
		if(getGameOverStatus()){
			g.setColor(Color.BLACK);
			g.setFont(new Font("Calibri", Font.BOLD, 130));
			g.drawString("Game Over" , 600 , 520);
			
			g.setColor(Color.GREEN);
			g.fillRect(600, 600, 200, 200);
			g.setColor(Color.BLACK);
			g.setFont(new Font("Calibri", Font.BOLD, 50));
			g.drawString("Restart", 625, 700);
			
			g.setColor(Color.RED);
			g.fillRect(1000, 600, 200, 200);
			g.setColor(Color.BLACK);
			g.setFont(new Font("Calibri", Font.BOLD, 50));
			g.drawString("Exit", 1065 , 700);
			
		}
		
		// ////////////////////////////////////////////////////////////////////////////
		
		Toolkit.getDefaultToolkit().sync();// does some visual stuff
		g.dispose();// diposes of past instances of draw i think
	}

	public void moveEnemies() {

		// moves enemies through the set course based on their total distance
		// traveled

		for (int i = 0; i < weakEnemyList.size() && weakEnemyList.size() != 0; i++) {
			weakEnemyList.get(i).moveEnemy(); // enemy movement
			if (weakEnemyList.get(i).getDistanceTraveled() >= 9150) {
				baseHealth = baseHealth - 10;
				weakEnemyList.remove(i);		 // checks if enemy has entered the
												// base, if so does damage
			}
			if (weakEnemyList.size() != 0 && weakEnemyList.get(i).health <= 0 ) {
				credits = credits + weakEnemyList.get(i).creditsOnDeath; 
				weakEnemyList.remove(i);
				// checks if enemy has died, if so rewards points
			}
		}
		for (int i = 0; i < averageEnemyList.size() && averageEnemyList.size() != 0; i++) {
			averageEnemyList.get(i).moveEnemy();
			if (averageEnemyList.get(i).getDistanceTraveled() >= 9150) {
				baseHealth = baseHealth - 20;
				averageEnemyList.remove(i);
			}
			if (averageEnemyList.size() != 0 && averageEnemyList.get(i).health <= 0 ) {
				credits = credits + averageEnemyList.get(i).creditsOnDeath; 
				averageEnemyList.remove(i);
				// averageEnemy moevement
			}
		}

		for (int i = 0; i < strongEnemyList.size() && strongEnemyList.size() != 0; i++) {
			strongEnemyList.get(i).moveEnemy();
			if (strongEnemyList.get(i).getDistanceTraveled() >= 9150) {
				strongEnemyList.remove(i);
				baseHealth = baseHealth - 30;
			}
			if (strongEnemyList.size() != 0 && strongEnemyList.get(i).health <= 0) {
				credits = credits + strongEnemyList.get(i).creditsOnDeath; // strongEnemy
				strongEnemyList.remove(i);									// movement
			}
		}

		for (int i = 0; i < bossEnemyList.size() && bossEnemyList.size() != 0; i++) {
			bossEnemyList.get(i).moveEnemy();
			if (bossEnemyList.get(i).getDistanceTraveled() >= 9150) {
				bossEnemyList.remove(i);
				baseHealth = baseHealth - 50;
			}
			if (bossEnemyList.size() != 0 && bossEnemyList.get(i).health <= 0) {
				credits = credits + bossEnemyList.get(i).creditsOnDeath; // bossEnemy
				bossEnemyList.remove(i);								// movement
			}
		}

		// /////////////////////////////////////////////////////////////

		for (int i = 0; i < 10; i++) {
			for (int x = 0; x < 18; x++) {
				if (boxList[i][x].getContents() == 2) {
					boxList[i][x].tower1.findTarget(weakEnemyList,
							averageEnemyList, strongEnemyList, bossEnemyList);
				} else if (boxList[i][x].getContents() == 3) {
					boxList[i][x].tower2.findTarget(weakEnemyList,
							averageEnemyList, strongEnemyList, bossEnemyList);
				} else if (boxList[i][x].getContents() == 4) {
					boxList[i][x].tower3.findTarget(weakEnemyList,
							averageEnemyList, strongEnemyList, bossEnemyList);
				} else if (boxList[i][x].getContents() == 5) {
					boxList[i][x].tower4.findTarget(weakEnemyList,
							averageEnemyList, strongEnemyList, bossEnemyList);
				} else if (boxList[i][x].getContents() == 6) {
					boxList[i][x].tower5.findTarget(weakEnemyList,
							averageEnemyList, strongEnemyList, bossEnemyList);
				}
			}
		} // issues a find target command for all types of towers on the board

	}

	public void updateRoundStatus() {
		if (weakEnemyList.size() + averageEnemyList.size()
				+ strongEnemyList.size() + bossEnemyList.size() == 0) {
			roundIn = false; // checks if the round is over by seeing how many
								// enemies remain alive
		}
	}

	public boolean getGameOverStatus() {
		if (baseHealth <= 0) {
			return true;// checks if game has ended
		}
		else{
			return false;
		}
	}

	public boolean checkSpedUp() {
		return spedUp;// returns wether or not the speed is increased or normal
	}

	public void update() { // calls the paintComponent method remotely
		repaint();
	}
}
